#!/usr/bin/env bash

# Switch audio output and input for PulseAudio
# Runs well on Ubuntu 22.04 / Linux Mint 21

# Colors
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)
# Separator
SEP=$(printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '-')

#
# List all audio outputs and inputs
#

# List all audio outputs (index and name)
function list_sinks()
{
    echo -e "\n [$GREEN Outputs $RESET]\n"

    pacmd list-sinks | egrep 'index:|name:'

    echo -e "\n  → Apply output device with: --output <index>"
    echo -e "  → Apply output volume with: --output-volume <volume%>\n"
}

# List all audio inputs (index and name)
function list_sources()
{
    echo -e "\n [$GREEN Inputs $RESET]\n"

    pacmd list-sources | egrep 'index:|name:'

    echo -e "\n  → Apply input device with: --input <index>"
    echo -e "  → Apply input volume with: --input-volume <volume%>\n"
}

#
# Switching audio input and output
#

# Switch output (sink)
function switch_output()
{
    ERROR_MSG=""
    NAME=$1

    # Check if the given index (numeric or string) exists
    if ! pacmd list-sinks | grep -q "index: $1" &&
       ! pacmd list-sinks | grep -q "name: <$1>"; then

        echo -e "${YELLOW}Could not switch to $1: no such device${RESET}"
        notify-send -t 1000 "Could not switch to $1: no such device"

        exit 1
    fi

    # If specified index is numeric, retrieve real device name, just for display
    if [[ $1 =~ ^[0-9]+$ ]]; then
        NAME=$(pacmd list-sinks | grep -A 1 "index: $1" | grep "name:" | awk '{print $2}' | sed 's/<//g' | sed 's/>//g')       
    fi

    #
    # Switch audio output
    #

    # Try to switch default output and get error message if any
    OUTPUT=$(pactl set-default-sink $1 2>&1)

    # Case there is an error
    if [ $? -ne 0 ]; then
        # Parse error message
        if echo "$OUTPUT" | grep -q "No such entity"; then
            ERROR_MSG="is your device connected?"
        else
            ERROR_MSG="$OUTPUT"
        fi

        echo -e "${YELLOW}Could not switch to $NAME: $ERROR_MSG${RESET}\n"
        notify-send -t 1000 "Could not switch to $NAME: $ERROR_MSG"

        exit 1
    fi

    # Switch audio output for all applications
    OUTPUT=$(pacmd list-sink-inputs | awk '/index:/{print $2}' | xargs -r -I{} pactl move-sink-input {} $1 2>&1)

    # Case there is an error
    if [ $? -ne 0 ]; then
        # Parse error message
        if echo "$OUTPUT" | grep -q "No such entity"; then
            ERROR_MSG="is your device connected?"
        else
            ERROR_MSG="$OUTPUT"
        fi

        echo -e "${YELLOW}Could not switch to $NAME: $ERROR_MSG${RESET}\n"
        notify-send -t 1000 "Could not switch to $NAME: $ERROR_MSG"

        exit 1
    fi

    # If no error, display OK
    echo -e "${GREEN}OK${RESET}"

    # Send notification
    notify-send -t 1000 "Output switched to $NAME"
}

# Switch input (source)
function switch_input()
{
    ERROR_MSG=""
    NAME=$1

    # Check if the given index (numeric or string) exists
    if ! pacmd list-sources | grep -q "index: $1" &&
       ! pacmd list-sources | grep -q "name: <$1>"; then

        echo -e "${YELLOW}Could not switch input to $1: no such device${RESET}"
        notify-send -t 1000 "Could not switch input to $1: no such device"

        exit 1
    fi

    # If specified index is numeric, retrieve real device name, just for display
    if [[ $1 =~ ^[0-9]+$ ]]; then
        NAME=$(pacmd list-sources | grep -A 1 "index: $1" | grep "name:" | awk '{print $2}' | sed 's/<//g' | sed 's/>//g')       
    fi

    #
    # Switch audio input
    #

    # Try to switch default input and get error message if any
    OUTPUT=$(pactl set-default-source $1 2>&1)

    # Case there is an error
    if [ $? -ne 0 ]; then
        # Parse error message
        if echo "$OUTPUT" | grep -q "No such entity"; then
            ERROR_MSG="is your device connected?"
        else
            ERROR_MSG="$OUTPUT"
        fi

        echo -e "${YELLOW}Could not switch input to $NAME: $ERROR_MSG${RESET}\n"
        notify-send -t 1000 "Could not switch input to $NAME: $ERROR_MSG"

        exit 1
    fi

    # Switch audio input for all applications
    OUTPUT=$(pacmd list-source-outputs | awk '/index:/{print $2}' | xargs -r -I{} pactl move-source-output {} $1 2>&1)

    # Case there is an error
    if [ $? -ne 0 ]; then
        # Parse error message
        if echo "$OUTPUT" | grep -q "No such entity"; then
            ERROR_MSG="is your device connected?"
        else
            ERROR_MSG="$OUTPUT"
        fi

        echo -e "${YELLOW}Could not switch input to $NAME: $ERROR_MSG${RESET}\n"
        notify-send -t 1000 "Could not switch input to $NAME: $ERROR_MSG"

        exit 1
    fi

    # If no error, display OK
    echo -e "${GREEN}OK${RESET}"

    # Send notification
    notify-send -t 1000 "Input switched to $NAME"
}

#
# Set input or output volume
#

# Set input volume
function input_volume()
{
    # Check that the given volume is a number followed by %
    if ! echo "$1" | grep -q "^[0-9]\+%$"; then
        echo -e "${YELLOW}Volume must be a number followed by %${RESET}"
        notify-send -t 1000 "Could not set input volume to $1: volume must be a number followed by %"

        exit 1
    fi

    OUTPUT=$(pactl set-source-volume @DEFAULT_SOURCE@ $1 2>&1)

    # Case there is an error
    if [ $? -ne 0 ]; then
        echo -e "${YELLOW}Could not set input volume to $1: $OUTPUT${RESET}\n"
        notify-send -t 1000 "Could not set input volume to $1: $OUTPUT"

        exit 1
    fi

    # If no error, display OK
    echo -e "${GREEN}OK${RESET}"

    # Send notification
    notify-send -t 1000 "Input volume set to $1"
}

# Set output volume
function output_volume()
{
    # Check that the given volume is a number followed by %
    if ! echo "$1" | grep -q "^[0-9]\+%$"; then
        echo -e "${YELLOW}Volume must be a number followed by %${RESET}"
        notify-send -t 1000 "Could not set output volume to $1: volume must be a number followed by %"

        exit 1
    fi

    OUTPUT=$(pactl set-sink-volume @DEFAULT_SINK@ $1 2>&1)

    # Case there is an error
    if [ $? -ne 0 ]; then
        echo -e "${YELLOW}Could not set output volume to $1: $OUTPUT${RESET}\n"
        notify-send -t 1000 "Could not set output volume to $1: $OUTPUT"

        exit 1
    fi

    # If no error, display OK
    echo -e "${GREEN}OK${RESET}"

    # Send notification
    notify-send -t 1000 "Output volume set to $1"
}

#
# Main execution
#

# Check if notify-send is installed
if ! dpkg -l | grep "libnotify-bin" | grep -q "ii"; then
    echo -e "\n${YELLOW}Please install libnotify-bin package: sudo apt install libnotify-bin${RESET}\n"
    exit 1
fi

# If no argument is given, list all audio inputs and outputs
if [ $# -eq 0 ]; then
    list_sources
    list_sinks
fi

while [ $# -ge 1 ];do
    case "$1" in
        --help)
            list_sources
            list_sinks
            exit
        ;;
        --output|out)
            if [ ! -z "$2" ]; then
                echo -ne "Applying output: "
                switch_output "$2"
                shift
            fi
        ;;
        --input|in)
            if [ ! -z "$2" ]; then
                echo -ne "Applying input: "
                switch_input "$2"
                shift
            fi
        ;;
        --input-volume|invol)
            if [ ! -z "$2" ]; then
                echo -ne "Applying input volume: "
                input_volume "$2"
                shift
            fi
        ;;
        --output-volume|outvol)
            if [ ! -z "$2" ]; then
                echo -ne "Applying output volume: "
                output_volume "$2"
                shift
            fi
        ;;
        esac
    shift
done
